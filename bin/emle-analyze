#!/usr/bin/env python

#######################################################################
# EMLE-Engine: https://github.com/chemle/emle-engine
#
# Copyright: 2023-2025
#
# Authors: Lester Hedges   <lester.hedges@gmail.com>
#          Kirill Zinovjev <kzinovjev@gmail.com>
#
# EMLE-Engine is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# EMLE-Engine is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with EMLE-Engine. If not, see <http://www.gnu.org/licenses/>.
#####################################################################

import argparse

parser = argparse.ArgumentParser(
    description="Analysis tool for ML(EMLE)/MM simulations"
)
parser.add_argument(
    "--orca-tarball", type=str, metavar="name.tar", required=False, help="ORCA tarball"
)
parser.add_argument(
    "--emle-model", type=str, metavar="name.mat", required=False, help="EMLE model file"
)
parser.add_argument(
    "--backend",
    type=str,
    choices=["torchani", "mace", "deepmd"],
    help="Gas phase ML backend",
)
parser.add_argument(
    "--deepmd-model",
    type=str,
    metavar="name.pb",
    help="DeePMD model file(s) (for backend='deepmd')",
)
parser.add_argument(
    "--mace-model",
    type=str,
    help="MACE model file (for backend='mace')",
)
parser.add_argument(
    "--qm-xyz", type=str, metavar="name.xyz", required=True, help="QM xyz file"
)
parser.add_argument(
    "--pc-xyz",
    type=str,
    metavar="name.pc",
    required=True,
    help="Point charges xyz file",
)
parser.add_argument(
    "--alpha-mode",
    type=str,
    choices=["species", "reference"],
    default="species",
    help="Method for calculating atomic polarizabilities",
)
parser.add_argument(
    "--alpha", action="store_true", help="Extract molecular dipolar polarizabilities"
)
parser.add_argument(
    "--q-total",
    type=int,
    help="Total charge of the QM region",
)
parser.add_argument(
    "--start",
    type=int,
    help="Structure index to start parsing",
)
parser.add_argument(
    "--end",
    type=int,
    help="Structure index to end parsing",
)
parser.add_argument("output", type=str, help="Output mat file")
args = parser.parse_args()


import scipy.io

from emle.models import EMLE
from emle._analyzer import EMLEAnalyzer
from emle._orca_parser import ORCAParser

if args.backend == "deepmd" and not args.deepmd_model:
    parser.error("--deepmd-model is required when backend='deepmd'")
if args.backend == "mace" and not args.mace_model:
    parser.error("--mace-model is required when backend='mace'")

backend = None
if args.backend == "torchani":
    from emle.models import ANI2xEMLE

    backend = ANI2xEMLE()
elif args.backend == "mace":
    from emle.models import MACEEMLE

    backend = MACEEMLE(emle_model=args.emle_model, mace_model=args.mace_model)

elif args.backend == "maceemle":
    from emle.models import MACEEMLEJoint

    backend = MACEEMLEJoint(emle_model=args.emle_model, mace_model=args.mace_model)

elif args.backend == "deepmd":
    from emle._backends import DeePMD

    backend = DeePMD(args.deepmd_model)

emle_base = EMLE(model=args.emle_model, alpha_mode=args.alpha_mode)._emle_base

orca_parser = None
if args.orca_tarball:
    orca_parser = ORCAParser(args.orca_tarball, decompose=True, alpha=args.alpha)

analyzer = EMLEAnalyzer(
    args.qm_xyz,
    args.pc_xyz,
    emle_base,
    backend,
    orca_parser,
    args.q_total,
    start=args.start,
    end=args.end,
)

result = {
    "z": analyzer.atomic_numbers,
    "xyz": analyzer.qm_xyz,
    "E_static_emle": analyzer.e_static,
    "E_induced_emle": analyzer.e_induced,
    "s_emle": analyzer.s,
    "q_core_emle": analyzer.q_core,
    "q_val_emle": analyzer.q_val,
    "atomic_alpha_emle": analyzer.atomic_alpha,
    "alpha_emle": analyzer.alpha,
}

if orca_parser:
    result.update(
        {
            "z": orca_parser.z,
            "xyz": orca_parser.xyz,
            "E_vac_qm": orca_parser.vac_E,
            "E_static_qm": orca_parser.E_static,
            "E_induced_qm": orca_parser.E_induced,
            "s_qm": orca_parser.mbis["s"],
            "q_core_qm": orca_parser.mbis["q_core"],
            "q_val_qm": orca_parser.mbis["q_val"],
            "E_static_mbis": analyzer.e_static_mbis,
        }
    )

if args.backend:
    result["E_vac_emle"] = analyzer.e_backend
if args.alpha:
    result["alpha_qm"] = orca_parser.alpha

scipy.io.savemat(args.output, result)
