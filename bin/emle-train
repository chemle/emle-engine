#!/usr/bin/env python

#######################################################################
# EMLE-Engine: https://github.com/chemle/emle-engine
#
# Copyright: 2023-2025
#
# Authors: Lester Hedges   <lester.hedges@gmail.com>
#          Kirill Zinovjev <kzinovjev@gmail.com>
#
# EMLE-Engine is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# EMLE-Engine is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with EMLE-Engine. If not, see <http://www.gnu.org/licenses/>.
#####################################################################


import ast
import argparse
import numpy as np

parser = argparse.ArgumentParser(
    description="EMLE training script",
    formatter_class=argparse.ArgumentDefaultsHelpFormatter,
)

parser.add_argument(
    "--orca-tarball", type=str, metavar="name.tar", required=True, help="ORCA tarball"
)
parser.add_argument("--train-mask", type=str, metavar="", help="Mask for training set")
parser.add_argument(
    "--sigma", type=float, metavar="", default=0.001, help="Sigma value for GPR"
)
parser.add_argument(
    "--ivm-thr", type=float, metavar="", default=0.05, help="IVM threshold"
)
parser.add_argument(
    "--epochs", type=int, metavar="", default=100, help="Number of training epochs"
)
parser.add_argument(
    "--lr-qeq",
    type=float,
    metavar="",
    default=0.05,
    help="Learning rate for QEq params (a_QEq, chi_ref)",
)
parser.add_argument(
    "--lr-thole",
    type=float,
    metavar="",
    default=0.05,
    help="Learning rate for Thole model params (a_Thole, k_Z)",
)
parser.add_argument(
    "--lr-sqrtk",
    type=float,
    metavar="",
    default=0.05,
    help="Learning rate for polarizability scaling factors (sqrtk_ref)",
)
parser.add_argument(
    "--print-every",
    type=int,
    metavar="",
    default=10,
    help="How often to print training progress",
)
parser.add_argument(
    "--computer-n-species",
    type=int,
    metavar="",
    default=None,
    help="Number of species supported by AEV computer",
)
parser.add_argument(
    "--computer-zid-map",
    type=str,
    metavar="",
    default=None,
    help="Map between EMLE and AEV computer zid values",
)
parser.add_argument(
    "--plot-data", type=str, metavar="name.mat", default=None, help="Data for plotting"
)
parser.add_argument(
    "--use-minibatch",
    action="store_true",
    help="Use minibatch training",
)
parser.add_argument(
    "--batch-size",
    type=int,
    metavar="",
    default=1024,
    help="Batch size for minibatch training",
)
parser.add_argument(
    "--shuffle",
    action="store_true",
    help="Shuffle training data",
)

parser.add_argument("output", type=str, help="Output model file")
args = parser.parse_args()


import scipy.io

from emle._orca_parser import ORCAParser
from emle.train import EMLETrainer

zid_map = ast.literal_eval(args.computer_zid_map) if args.computer_zid_map else None

parser = ORCAParser(args.orca_tarball, decompose=False, alpha=True)

train_mask = None
if args.train_mask:
    train_mask = np.loadtxt(args.train_mask, dtype=bool)

trainer = EMLETrainer()
trainer.train(
    z=parser.z,
    xyz=parser.xyz,
    s=parser.mbis["s"],
    q_core=parser.mbis["q_core"],
    q_val=parser.mbis["q_val"],
    alpha=parser.alpha,
    sigma=args.sigma,
    ivm_thr=args.ivm_thr,
    epochs=args.epochs,
    lr_qeq=args.lr_qeq,
    lr_thole=args.lr_thole,
    lr_sqrtk=args.lr_sqrtk,
    computer_n_species=args.computer_n_species,
    computer_zid_map=zid_map,
    train_mask=train_mask,
    print_every=args.print_every,
    model_filename=args.output,
    plot_data_filename=args.plot_data,
    use_minibatch=args.use_minibatch,
    batch_size=args.batch_size,
    shuffle=args.shuffle,
)
